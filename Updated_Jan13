package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name = "Go")
public class Android_Studio_Test extends LinearOpMode {

    // Declare OpMode members
    private ElapsedTime runtime = new ElapsedTime();
    public DcMotor BL_Motor;
    public DcMotor BR_Motor;
    public DcMotor FL_Motor;
    public DcMotor FR_Motor;
    public DcMotor UPPArm_Motor;
    public DcMotor Vertical_Rack;

    public Servo Rack_Servo;

    public Servo Grabber_Servo;

    private final int maxVerticalRackHeight = 1818;
    private final int minVerticalRackHeight = 0;

    private final double GRABBER_CLOSED = 0.0; // Closed position
    private final double GRABBER_OPEN = 1.0; // Open position

    @Override
    public void runOpMode() {
        // Hardware mapping
        BR_Motor = hardwareMap.get(DcMotor.class, "BR Wheel Motor");
        FL_Motor = hardwareMap.get(DcMotor.class, "FL Wheel Motor");
        BL_Motor = hardwareMap.get(DcMotor.class, "BL Wheel Motor");
        FR_Motor = hardwareMap.get(DcMotor.class, "FR Wheel Motor");
        UPPArm_Motor = hardwareMap.get(DcMotor.class, "Upper Arm Motor");
        Vertical_Rack = hardwareMap.get(DcMotor.class, "Vertical Rack");
        Grabber_Servo = hardwareMap.get(Servo.class, "Grabber_Servo");
        Rack_Servo = hardwareMap.get(Servo.class, "Rack_Servo");

        // Reset and configure vertical rack encoder
        Vertical_Rack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Vertical_Rack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // Motor direction configuration
        BR_Motor.setDirection(DcMotorSimple.Direction.FORWARD);
        FR_Motor.setDirection(DcMotorSimple.Direction.FORWARD);
        BL_Motor.setDirection(DcMotorSimple.Direction.REVERSE);
        FL_Motor.setDirection(DcMotorSimple.Direction.REVERSE);

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        while (opModeIsActive()) {
            // Mecanum drive calculations
            double axial = -gamepad1.left_stick_y; // Forward/backward
            double lateral = gamepad1.left_stick_x; // Left/right
            double yaw = gamepad1.right_stick_x; // Rotation

            double leftFrontPower = axial + lateral + yaw;
            double rightFrontPower = axial - lateral - yaw;
            double leftBackPower = axial - lateral + yaw;
            double rightBackPower = axial + lateral - yaw;

            // Normalize the powers
            double maxPower = Math.max(Math.abs(leftFrontPower), Math.abs(rightFrontPower));
            maxPower = Math.max(maxPower, Math.abs(leftBackPower));
            maxPower = Math.max(maxPower, Math.abs(rightBackPower));

            if (maxPower > 1.0) {
                leftFrontPower /= maxPower;
                rightFrontPower /= maxPower;
                leftBackPower /= maxPower;
                rightBackPower /= maxPower;
            }

            // Set motor powers
            FL_Motor.setPower(leftFrontPower);
            FR_Motor.setPower(rightFrontPower);
            BL_Motor.setPower(leftBackPower);
            BR_Motor.setPower(rightBackPower);

            // Vertical Rack Control with Limits
            double verticalRackSpeed = (gamepad2.right_trigger - gamepad2.left_trigger) * 0.5; // Adjust speed

            if (Vertical_Rack.getCurrentPosition() <= minVerticalRackHeight && verticalRackSpeed < 0) {
                verticalRackSpeed = 0; // Prevent going below minimum
            } else if (Vertical_Rack.getCurrentPosition() >= maxVerticalRackHeight && verticalRackSpeed > 0) {
                verticalRackSpeed = 0; // Prevent going above maximum
            }

            Vertical_Rack.setPower(verticalRackSpeed);

            // UPPArm Control with Limits
            double uppArmSpeed = gamepad2.right_stick_y * 0.5; // Adjust speed based on right stick Y

            // Optional: Add position limits for the UPPArm_Motor (if needed)
            if (UPPArm_Motor.getCurrentPosition() <= 0 && uppArmSpeed < 0) {
                uppArmSpeed = 0; // Prevent moving below 0 (down limit)
            } else if (UPPArm_Motor.getCurrentPosition() >= 1000 && uppArmSpeed > 0) { // Replace 1000 with your own upper limit
                uppArmSpeed = 0; // Prevent moving above max height (up limit)
            }

            UPPArm_Motor.setPower(uppArmSpeed);

            // Grabber Control
            if (gamepad2.y) {
                Grabber_Servo.setPosition(GRABBER_CLOSED);
            } else if (gamepad2.a) {
                Grabber_Servo.setPosition(GRABBER_OPEN);
            }
            //Rack Servo Control
            if (gamepad2.dpad_up) {
                Rack_Servo.setPosition(1);//Move Rack_Servo to the up position (adjust if necessary)
            } else if (gamepad2.dpad_down) {
                Rack_Servo.setPosition(0); //Move Rack_Servo to the down position (adjust if necessary)
            }


            }

            // Telemetry
            telemetry.addData("Rack Position", Vertical_Rack.getCurrentPosition());
            telemetry.addData("Arm Position", UPPArm_Motor.getCurrentPosition()); // Display arm position
            telemetry.addData("Runtime", runtime.seconds());
            telemetry.update();
        }
    }


